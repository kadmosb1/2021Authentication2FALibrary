package tfa;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import de.taimos.totp.TOTP;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Hex;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.SecureRandom;
import java.util.Scanner;

/*
 * Implementation below is based on the information at https://medium.com/@ihorsokolyk/two-factor-authentication-with-java-and-google-authenticator-9d7ea15ffee6#,
 * geraadpleegd op 20 mei 2021.
 */
public class Authentication2FA {

    /*
     * Zie de toelichting op https://medium.com/@ihorsokolyk/two-factor-authentication-with-java-and-google-authenticator-9d7ea15ffee6#.
     */
    private static String generateSecretKey () {
        SecureRandom random = new SecureRandom ();
        byte [] bytes = new byte [20];
        random.nextBytes (bytes);
        Base32 base32 = new Base32 ();
        return base32.encodeToString (bytes);
    }

    /*
     * Zie de toelichting op https://medium.com/@ihorsokolyk/two-factor-authentication-with-java-and-google-authenticator-9d7ea15ffee6#.
     */
    private static String getGoogleAuthenticatorBarCode(String secretKey, String account, String issuer) {
        try {
            return "otpauth://totp/"
                    + URLEncoder.encode (issuer + ":" + account, "UTF-8").replace ("+", "%20")
                    + "?secret=" + URLEncoder.encode (secretKey, "UTF-8").replace ("+", "%20")
                    + "&issuer=" + URLEncoder.encode (issuer, "UTF-8").replace ("+", "%20");
        }
        catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e);
        }
    }

    /*
     * Zie de toelichting op https://medium.com/@ihorsokolyk/two-factor-authentication-with-java-and-google-authenticator-9d7ea15ffee6#.
     */
    private static void createQRCode (String barCodeData, String filePath, int height, int width)
            throws WriterException, IOException {

        BitMatrix matrix = new MultiFormatWriter ().encode (barCodeData, BarcodeFormat.QR_CODE, width, height);

        try (FileOutputStream out = new FileOutputStream (filePath)) {
            MatrixToImageWriter.writeToStream (matrix, "png", out);
        }
    }


    /**
     * @param secretKey - The code you used to activate 2FA.
     * @return A generated code that can be used to be compared to a code generated by a 2FA-app like Google Authenticator.
     */
    public static String getTOTPCode (String secretKey) {
        Base32 base32 = new Base32();
        byte[] bytes = base32.decode (secretKey);
        String hexKey = Hex.encodeHexString(bytes);
        return TOTP.getOTP(hexKey);
    }

    /**
     * @param secretKey - The code you used to activate 2FA.
     * @param code - The code die door de 2FA-app (bijv. Google Authenticator) is gegenereerd.
     * @return Is second parameter equal to the generated PTOP (based on first parameter)?
     */
    public static boolean checkAuthenticatorCode (String secretKey, String code) {
        return getTOTPCode (secretKey).equals (code);
    }

    /*
     * De gebruiker krijgt de kans om de secret key in te voeren in zijn 2FA-app en er wordt gecontroleerd of dat
     * correct is ingevoerd. De gebruiker kan het activeringsproces doorbreken door voor q te kiezen.
     */
    private static boolean activate (String secretKey) {

        Scanner scanner = new Scanner (System.in);

        System.out.println ("Activeer nu uw Google Authenticator met de volgende code: " + secretKey);
        System.out.println ("Eventueel staat een QR-code in de directory src\\main\\resources\\2fa");
        System.out.print   ("Voer de code (bestaande uit 6 cijfers) uit Google Authenticator hier in (of kies (q)uit): ");
        String code = scanner.nextLine ();

        while (!code.equals ("q") && !checkAuthenticatorCode (secretKey, code)) {
            System.out.print ("De code klopt niet. Voer de code opnieuw in of kies voor q(uit).");
            code = scanner.nextLine ();
        }

        return code.equals ("q");
    }

    /**
     * @param userName - The username that is used to generate a user-based QR-code.
     * @param nameOfApplication - The name of the application that is used to generate an application-based QR-code.
     * @return If activated, the secret key is returned.
     */
    public static String activate (String userName, String... nameOfApplication) {

        String application = (nameOfApplication.length == 0 ? "2FA Application" : nameOfApplication [0]);

        // Een willekeurige secret key (die ingevoerd kan worden in de 2FA-app like Google Authenticator) wordt
        // gegenereerd.
        String secretKey = generateSecretKey();

        // Op basis van de secret key, userName en application wordt een QR-code gegenereerd.
        String barCodeUrl = Authentication2FA.getGoogleAuthenticatorBarCode (secretKey, userName, application);

        try {
            Authentication2FA.createQRCode (barCodeUrl, "src\\main\\resources\\2fa\\qrcode.png", 100, 100);
        }
        catch (WriterException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        // Als het de gebruiker lukt om de applicatie in zijn/haar 2FA-app te activeren, wordt de secret key terug
        // gegeven.
        return activate (secretKey) ? null : secretKey;
    }
}
